-- Quartus II VHDL Template
-- Four-State Moore State Machine

-- A Moore machine's outputs are dependent only on the current state.
-- The output is written only when the state changes.  (State
-- transitions are synchronous.)

library ieee;
use ieee.std_logic_1164.all;

entity ic2 is

	port(
		clk : in	std_logic;
		dir : in	std_logic_vector(6 downto 0);
		dato : in std_logic_vector(7 downto 0);
		SDA : in std_logic;
		r/w : in std_logic;
		dato_mostrado : out	std_logic_vector(7 downto 0)
	);

end entity;

architecture rtl of ic2 is

	-- Build an enumerated type for the state machine
	type state_type is (Oscioso, Guarda_dir, R/W, ACK, Guardar_dato);

	-- Register to hold the current state
	signal state   : state_type;
	signal fin_dir : std_logic;
	signal fin_dato : std_logic;
	signal dato_recibido : std_logic_vector(7 downto 0);

begin

	-- Logic to advance to the next state
	process (clk, reset)
	begin
		if (rising_edge(clk)) then
			case state is
				when Oscioso=>
					if SDA = '1' then
						state <= Oscioso;
					else
						state <= Guarda_dir;
					end if;
				when Guarda_dir=>
					if fin_dir = '0'then
						state <= Guarda_dir;
					else
						if (fin_dir = '1' and soy = '1')then
							state <= R/W;
						else
							state <= Oscioso;
						end if;
					end if;
				when R/W=>
						state <= ACK;
					end if;
				when ACK =>
						ack = 1;
						state <= Guardar_dato;
				when Guardar_dato=>
					if fin_dato = '1' then
						state <= Oscioso;
					else
						state <= Guardar_dato;
					end if;
			end case;
		end if;
	end process;

	-- Output depends solely on the current state
	process (state)
	begin
		case state is
			when Oscioso=>
				Hab_Dir = '0';
				ack = '0';
				Hab_Dat = '0';
				dato_recibido = "00000000";
			when Guarda_dir =>
				Hab_Dir = '1';
				ack = '0';
				Hab_Dat = '0';
				dato_recibido = "00000000";
			when ACK =>
				ack = '1';
				Hab_Dat = '0';
				Hab_Dir = '0';
				dato_recibido = "00000000";
			when Guardar_dato =>
				Hab_Dat = '1';
				ack = '0';
				Hab_Dir = '0';
				dato_recibido <= dato_recibido;
			when R/W =>
				dato_recibido = "00000000";
				if r/w = '1' then
					leer = '1';
				else
					leer = '0';
		end case;
	end process;

	process (Hab_Dir)
		variable i: std_logic;
		variable dir_recibida : std_logic_vector (6 downto 0);
	begin	
		i:=0;
		if i /= '6' then
			if (rising_edge(clk)) then
				dir_recibida(i) := dir;
				i:=i+1;
				fin_dir <= '1';
		if dir recibida = input then
			soy <= '1';
		else	
			soy <= '0';
	end process;
	
	process (Hab_Dat)
		variable i: std_logic;
	begin	
		dato_recibido <= "00000000";
		i:=0;
		if i /= '7' then
			if (rising_edge(clk)) then
				dato_recibido(i) := dato;
				i:=i+1;
				fin_dato <= '1';
	end process;
end rtl;
