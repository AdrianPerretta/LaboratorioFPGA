// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2025 13:05:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2cEsquematico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2cEsquematico_vlg_sample_tst(
	SCL,
	SDA,
	sampler_tx
);
input  SCL;
input  SDA;
output sampler_tx;

reg sample;
time current_time;
always @(SCL or SDA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2cEsquematico_vlg_check_tst (
	DATO,
	SALIDA_ACK,
	SDA,
	sampler_rx
);
input [7:0] DATO;
input  SALIDA_ACK;
input  SDA;
input sampler_rx;

reg [7:0] DATO_expected;
reg  SALIDA_ACK_expected;
reg  SDA_expected;

reg [7:0] DATO_prev;
reg  SALIDA_ACK_prev;
reg  SDA_prev;

reg [7:0] DATO_expected_prev;
reg  SALIDA_ACK_expected_prev;
reg  SDA_expected_prev;

reg [7:0] last_DATO_exp;
reg  last_SALIDA_ACK_exp;
reg  last_SDA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATO_prev = DATO;
	SALIDA_ACK_prev = SALIDA_ACK;
	SDA_prev = SDA;
end

// update expected /o prevs

always @(trigger)
begin
	DATO_expected_prev = DATO_expected;
	SALIDA_ACK_expected_prev = SALIDA_ACK_expected;
	SDA_expected_prev = SDA_expected;
end



// expected SALIDA_ACK
initial
begin
	SALIDA_ACK_expected = 1'bX;
end 
// expected DATO[ 7 ]
initial
begin
	DATO_expected[7] = 1'bX;
end 
// expected DATO[ 6 ]
initial
begin
	DATO_expected[6] = 1'bX;
end 
// expected DATO[ 5 ]
initial
begin
	DATO_expected[5] = 1'bX;
end 
// expected DATO[ 4 ]
initial
begin
	DATO_expected[4] = 1'bX;
end 
// expected DATO[ 3 ]
initial
begin
	DATO_expected[3] = 1'bX;
end 
// expected DATO[ 2 ]
initial
begin
	DATO_expected[2] = 1'bX;
end 
// expected DATO[ 1 ]
initial
begin
	DATO_expected[1] = 1'bX;
end 
// expected DATO[ 0 ]
initial
begin
	DATO_expected[0] = 1'bX;
end 
// generate trigger
always @(DATO_expected or DATO or SALIDA_ACK_expected or SALIDA_ACK or SDA_expected or SDA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATO = %b | expected SALIDA_ACK = %b | expected SDA = %b | ",DATO_expected_prev,SALIDA_ACK_expected_prev,SDA_expected_prev);
	$display("| real DATO = %b | real SALIDA_ACK = %b | real SDA = %b | ",DATO_prev,SALIDA_ACK_prev,SDA_prev);
`endif
	if (
		( DATO_expected_prev[0] !== 1'bx ) && ( DATO_prev[0] !== DATO_expected_prev[0] )
		&& ((DATO_expected_prev[0] !== last_DATO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[0] = DATO_expected_prev[0];
	end
	if (
		( DATO_expected_prev[1] !== 1'bx ) && ( DATO_prev[1] !== DATO_expected_prev[1] )
		&& ((DATO_expected_prev[1] !== last_DATO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[1] = DATO_expected_prev[1];
	end
	if (
		( DATO_expected_prev[2] !== 1'bx ) && ( DATO_prev[2] !== DATO_expected_prev[2] )
		&& ((DATO_expected_prev[2] !== last_DATO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[2] = DATO_expected_prev[2];
	end
	if (
		( DATO_expected_prev[3] !== 1'bx ) && ( DATO_prev[3] !== DATO_expected_prev[3] )
		&& ((DATO_expected_prev[3] !== last_DATO_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[3] = DATO_expected_prev[3];
	end
	if (
		( DATO_expected_prev[4] !== 1'bx ) && ( DATO_prev[4] !== DATO_expected_prev[4] )
		&& ((DATO_expected_prev[4] !== last_DATO_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[4] = DATO_expected_prev[4];
	end
	if (
		( DATO_expected_prev[5] !== 1'bx ) && ( DATO_prev[5] !== DATO_expected_prev[5] )
		&& ((DATO_expected_prev[5] !== last_DATO_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[5] = DATO_expected_prev[5];
	end
	if (
		( DATO_expected_prev[6] !== 1'bx ) && ( DATO_prev[6] !== DATO_expected_prev[6] )
		&& ((DATO_expected_prev[6] !== last_DATO_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[6] = DATO_expected_prev[6];
	end
	if (
		( DATO_expected_prev[7] !== 1'bx ) && ( DATO_prev[7] !== DATO_expected_prev[7] )
		&& ((DATO_expected_prev[7] !== last_DATO_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATO_expected_prev);
		$display ("     Real value = %b", DATO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATO_exp[7] = DATO_expected_prev[7];
	end
	if (
		( SALIDA_ACK_expected_prev !== 1'bx ) && ( SALIDA_ACK_prev !== SALIDA_ACK_expected_prev )
		&& ((SALIDA_ACK_expected_prev !== last_SALIDA_ACK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SALIDA_ACK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SALIDA_ACK_expected_prev);
		$display ("     Real value = %b", SALIDA_ACK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SALIDA_ACK_exp = SALIDA_ACK_expected_prev;
	end
	if (
		( SDA_expected_prev !== 1'bx ) && ( SDA_prev !== SDA_expected_prev )
		&& ((SDA_expected_prev !== last_SDA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SDA_expected_prev);
		$display ("     Real value = %b", SDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SDA_exp = SDA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2cEsquematico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg SCL;
reg treg_SDA;
// wires                                               
wire [7:0] DATO;
wire SALIDA_ACK;
wire SDA;

wire sampler;                             

// assign statements (if any)                          
assign SDA = treg_SDA;
i2cEsquematico i1 (
// port map - connection between master ports and signals/registers   
	.DATO(DATO),
	.SALIDA_ACK(SALIDA_ACK),
	.SCL(SCL),
	.SDA(SDA)
);

// SDA
initial
begin
	treg_SDA = 1'b1;
	treg_SDA = #20000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #60000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #40000 1'b0;
	treg_SDA = #50000 1'bX;
	treg_SDA = #60000 1'b0;
	treg_SDA = #10000 1'b1;
	treg_SDA = #80000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #20000 1'b0;
	treg_SDA = #20000 1'b1;
end 

// SCL
initial
begin
	repeat(11)
	begin
		SCL = 1'b0;
		SCL = #10000 1'b1;
		# 10000;
	end
	SCL = 1'b0;
	SCL = #50000 1'b1;
	# 10000;
	repeat(36)
	begin
		SCL = 1'b0;
		SCL = #10000 1'b1;
		# 10000;
	end
end 

i2cEsquematico_vlg_sample_tst tb_sample (
	.SCL(SCL),
	.SDA(SDA),
	.sampler_tx(sampler)
);

i2cEsquematico_vlg_check_tst tb_out(
	.DATO(DATO),
	.SALIDA_ACK(SALIDA_ACK),
	.SDA(SDA),
	.sampler_rx(sampler)
);
endmodule

