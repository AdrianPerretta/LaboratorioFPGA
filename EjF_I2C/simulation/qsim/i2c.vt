// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/27/2025 00:19:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2c
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2c_vlg_sample_tst(
	clk,
	dato,
	dir,
	reset,
	rowed,
	SDA,
	sampler_tx
);
input  clk;
input [7:0] dato;
input [6:0] dir;
input  reset;
input  rowed;
input  SDA;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dato or dir or reset or rowed or SDA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2c_vlg_check_tst (
	acknow,
	dato_mostrado,
	Hab_Dat,
	Hab_Dir,
	leer,
	sampler_rx
);
input  acknow;
input [7:0] dato_mostrado;
input  Hab_Dat;
input  Hab_Dir;
input  leer;
input sampler_rx;

reg  acknow_expected;
reg [7:0] dato_mostrado_expected;
reg  Hab_Dat_expected;
reg  Hab_Dir_expected;
reg  leer_expected;

reg  acknow_prev;
reg [7:0] dato_mostrado_prev;
reg  Hab_Dat_prev;
reg  Hab_Dir_prev;
reg  leer_prev;

reg  acknow_expected_prev;
reg [7:0] dato_mostrado_expected_prev;
reg  Hab_Dat_expected_prev;
reg  Hab_Dir_expected_prev;
reg  leer_expected_prev;

reg  last_acknow_exp;
reg [7:0] last_dato_mostrado_exp;
reg  last_Hab_Dat_exp;
reg  last_Hab_Dir_exp;
reg  last_leer_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	acknow_prev = acknow;
	dato_mostrado_prev = dato_mostrado;
	Hab_Dat_prev = Hab_Dat;
	Hab_Dir_prev = Hab_Dir;
	leer_prev = leer;
end

// update expected /o prevs

always @(trigger)
begin
	acknow_expected_prev = acknow_expected;
	dato_mostrado_expected_prev = dato_mostrado_expected;
	Hab_Dat_expected_prev = Hab_Dat_expected;
	Hab_Dir_expected_prev = Hab_Dir_expected;
	leer_expected_prev = leer_expected;
end


// expected dato_mostrado[ 7 ]
initial
begin
	dato_mostrado_expected[7] = 1'bX;
end 
// expected dato_mostrado[ 6 ]
initial
begin
	dato_mostrado_expected[6] = 1'bX;
end 
// expected dato_mostrado[ 5 ]
initial
begin
	dato_mostrado_expected[5] = 1'bX;
end 
// expected dato_mostrado[ 4 ]
initial
begin
	dato_mostrado_expected[4] = 1'bX;
end 
// expected dato_mostrado[ 3 ]
initial
begin
	dato_mostrado_expected[3] = 1'bX;
end 
// expected dato_mostrado[ 2 ]
initial
begin
	dato_mostrado_expected[2] = 1'bX;
end 
// expected dato_mostrado[ 1 ]
initial
begin
	dato_mostrado_expected[1] = 1'bX;
end 
// expected dato_mostrado[ 0 ]
initial
begin
	dato_mostrado_expected[0] = 1'bX;
end 

// expected Hab_Dat
initial
begin
	Hab_Dat_expected = 1'bX;
end 

// expected Hab_Dir
initial
begin
	Hab_Dir_expected = 1'bX;
end 

// expected leer
initial
begin
	leer_expected = 1'bX;
end 

// expected acknow
initial
begin
	acknow_expected = 1'bX;
end 
// generate trigger
always @(acknow_expected or acknow or dato_mostrado_expected or dato_mostrado or Hab_Dat_expected or Hab_Dat or Hab_Dir_expected or Hab_Dir or leer_expected or leer)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected acknow = %b | expected dato_mostrado = %b | expected Hab_Dat = %b | expected Hab_Dir = %b | expected leer = %b | ",acknow_expected_prev,dato_mostrado_expected_prev,Hab_Dat_expected_prev,Hab_Dir_expected_prev,leer_expected_prev);
	$display("| real acknow = %b | real dato_mostrado = %b | real Hab_Dat = %b | real Hab_Dir = %b | real leer = %b | ",acknow_prev,dato_mostrado_prev,Hab_Dat_prev,Hab_Dir_prev,leer_prev);
`endif
	if (
		( acknow_expected_prev !== 1'bx ) && ( acknow_prev !== acknow_expected_prev )
		&& ((acknow_expected_prev !== last_acknow_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port acknow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", acknow_expected_prev);
		$display ("     Real value = %b", acknow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_acknow_exp = acknow_expected_prev;
	end
	if (
		( dato_mostrado_expected_prev[0] !== 1'bx ) && ( dato_mostrado_prev[0] !== dato_mostrado_expected_prev[0] )
		&& ((dato_mostrado_expected_prev[0] !== last_dato_mostrado_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[0] = dato_mostrado_expected_prev[0];
	end
	if (
		( dato_mostrado_expected_prev[1] !== 1'bx ) && ( dato_mostrado_prev[1] !== dato_mostrado_expected_prev[1] )
		&& ((dato_mostrado_expected_prev[1] !== last_dato_mostrado_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[1] = dato_mostrado_expected_prev[1];
	end
	if (
		( dato_mostrado_expected_prev[2] !== 1'bx ) && ( dato_mostrado_prev[2] !== dato_mostrado_expected_prev[2] )
		&& ((dato_mostrado_expected_prev[2] !== last_dato_mostrado_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[2] = dato_mostrado_expected_prev[2];
	end
	if (
		( dato_mostrado_expected_prev[3] !== 1'bx ) && ( dato_mostrado_prev[3] !== dato_mostrado_expected_prev[3] )
		&& ((dato_mostrado_expected_prev[3] !== last_dato_mostrado_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[3] = dato_mostrado_expected_prev[3];
	end
	if (
		( dato_mostrado_expected_prev[4] !== 1'bx ) && ( dato_mostrado_prev[4] !== dato_mostrado_expected_prev[4] )
		&& ((dato_mostrado_expected_prev[4] !== last_dato_mostrado_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[4] = dato_mostrado_expected_prev[4];
	end
	if (
		( dato_mostrado_expected_prev[5] !== 1'bx ) && ( dato_mostrado_prev[5] !== dato_mostrado_expected_prev[5] )
		&& ((dato_mostrado_expected_prev[5] !== last_dato_mostrado_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[5] = dato_mostrado_expected_prev[5];
	end
	if (
		( dato_mostrado_expected_prev[6] !== 1'bx ) && ( dato_mostrado_prev[6] !== dato_mostrado_expected_prev[6] )
		&& ((dato_mostrado_expected_prev[6] !== last_dato_mostrado_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[6] = dato_mostrado_expected_prev[6];
	end
	if (
		( dato_mostrado_expected_prev[7] !== 1'bx ) && ( dato_mostrado_prev[7] !== dato_mostrado_expected_prev[7] )
		&& ((dato_mostrado_expected_prev[7] !== last_dato_mostrado_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dato_mostrado[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dato_mostrado_expected_prev);
		$display ("     Real value = %b", dato_mostrado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dato_mostrado_exp[7] = dato_mostrado_expected_prev[7];
	end
	if (
		( Hab_Dat_expected_prev !== 1'bx ) && ( Hab_Dat_prev !== Hab_Dat_expected_prev )
		&& ((Hab_Dat_expected_prev !== last_Hab_Dat_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Dat :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Dat_expected_prev);
		$display ("     Real value = %b", Hab_Dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hab_Dat_exp = Hab_Dat_expected_prev;
	end
	if (
		( Hab_Dir_expected_prev !== 1'bx ) && ( Hab_Dir_prev !== Hab_Dir_expected_prev )
		&& ((Hab_Dir_expected_prev !== last_Hab_Dir_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Dir_expected_prev);
		$display ("     Real value = %b", Hab_Dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Hab_Dir_exp = Hab_Dir_expected_prev;
	end
	if (
		( leer_expected_prev !== 1'bx ) && ( leer_prev !== leer_expected_prev )
		&& ((leer_expected_prev !== last_leer_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port leer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", leer_expected_prev);
		$display ("     Real value = %b", leer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_leer_exp = leer_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2c_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] dato;
reg [6:0] dir;
reg reset;
reg rowed;
reg SDA;
// wires                                               
wire acknow;
wire [7:0] dato_mostrado;
wire Hab_Dat;
wire Hab_Dir;
wire leer;

wire sampler;                             

// assign statements (if any)                          
i2c i1 (
// port map - connection between master ports and signals/registers   
	.acknow(acknow),
	.clk(clk),
	.dato(dato),
	.dato_mostrado(dato_mostrado),
	.dir(dir),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.leer(leer),
	.reset(reset),
	.rowed(rowed),
	.SDA(SDA)
);

// clk
initial
begin
	repeat(2)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	# 10000;
	repeat(45)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
end 
// dir[ 6 ]
initial
begin
	dir[6] = 1'b1;
end 
// dir[ 5 ]
initial
begin
	dir[5] = 1'b1;
end 
// dir[ 4 ]
initial
begin
	dir[4] = 1'b1;
end 
// dir[ 3 ]
initial
begin
	dir[3] = 1'b0;
end 
// dir[ 2 ]
initial
begin
	dir[2] = 1'b1;
end 
// dir[ 1 ]
initial
begin
	dir[1] = 1'b1;
end 
// dir[ 0 ]
initial
begin
	dir[0] = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
// dato[ 7 ]
initial
begin
	dato[7] = 1'b0;
end 
// dato[ 6 ]
initial
begin
	dato[6] = 1'b0;
end 
// dato[ 5 ]
initial
begin
	dato[5] = 1'b0;
end 
// dato[ 4 ]
initial
begin
	dato[4] = 1'b0;
end 
// dato[ 3 ]
initial
begin
	dato[3] = 1'b0;
end 
// dato[ 2 ]
initial
begin
	dato[2] = 1'b0;
end 
// dato[ 1 ]
initial
begin
	dato[1] = 1'b0;
end 
// dato[ 0 ]
initial
begin
	dato[0] = 1'b0;
end 

// SDA
initial
begin
	SDA = 1'b1;
	SDA = #20000 1'b0;
	SDA = #20000 1'b1;
end 

// rowed
initial
begin
	rowed = 1'b1;
end 

i2c_vlg_sample_tst tb_sample (
	.clk(clk),
	.dato(dato),
	.dir(dir),
	.reset(reset),
	.rowed(rowed),
	.SDA(SDA),
	.sampler_tx(sampler)
);

i2c_vlg_check_tst tb_out(
	.acknow(acknow),
	.dato_mostrado(dato_mostrado),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.leer(leer),
	.sampler_rx(sampler)
);
endmodule

