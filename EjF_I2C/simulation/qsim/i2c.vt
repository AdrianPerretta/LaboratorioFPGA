// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2025 23:46:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    i2cEsquematico
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module i2cEsquematico_vlg_sample_tst(
	clock,
	SDA,
	sampler_tx
);
input  clock;
input  SDA;
output sampler_tx;

reg sample;
time current_time;
always @(clock or SDA)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module i2cEsquematico_vlg_check_tst (
	cout1,
	cout2,
	cout3,
	Prueba,
	SDA,
	sampler_rx
);
input  cout1;
input  cout2;
input  cout3;
input  Prueba;
input  SDA;
input sampler_rx;

reg  cout1_expected;
reg  cout2_expected;
reg  cout3_expected;
reg  Prueba_expected;
reg  SDA_expected;

reg  cout1_prev;
reg  cout2_prev;
reg  cout3_prev;
reg  Prueba_prev;
reg  SDA_prev;

reg  cout1_expected_prev;
reg  cout2_expected_prev;
reg  cout3_expected_prev;
reg  Prueba_expected_prev;
reg  SDA_expected_prev;

reg  last_cout1_exp;
reg  last_cout2_exp;
reg  last_cout3_exp;
reg  last_Prueba_exp;
reg  last_SDA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout1_prev = cout1;
	cout2_prev = cout2;
	cout3_prev = cout3;
	Prueba_prev = Prueba;
	SDA_prev = SDA;
end

// update expected /o prevs

always @(trigger)
begin
	cout1_expected_prev = cout1_expected;
	cout2_expected_prev = cout2_expected;
	cout3_expected_prev = cout3_expected;
	Prueba_expected_prev = Prueba_expected;
	SDA_expected_prev = SDA_expected;
end



// expected Prueba
initial
begin
	Prueba_expected = 1'bX;
end 

// expected cout1
initial
begin
	cout1_expected = 1'bX;
end 

// expected cout2
initial
begin
	cout2_expected = 1'bX;
end 

// expected cout3
initial
begin
	cout3_expected = 1'bX;
end 
// generate trigger
always @(cout1_expected or cout1 or cout2_expected or cout2 or cout3_expected or cout3 or Prueba_expected or Prueba or SDA_expected or SDA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout1 = %b | expected cout2 = %b | expected cout3 = %b | expected Prueba = %b | expected SDA = %b | ",cout1_expected_prev,cout2_expected_prev,cout3_expected_prev,Prueba_expected_prev,SDA_expected_prev);
	$display("| real cout1 = %b | real cout2 = %b | real cout3 = %b | real Prueba = %b | real SDA = %b | ",cout1_prev,cout2_prev,cout3_prev,Prueba_prev,SDA_prev);
`endif
	if (
		( cout1_expected_prev !== 1'bx ) && ( cout1_prev !== cout1_expected_prev )
		&& ((cout1_expected_prev !== last_cout1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout1_expected_prev);
		$display ("     Real value = %b", cout1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout1_exp = cout1_expected_prev;
	end
	if (
		( cout2_expected_prev !== 1'bx ) && ( cout2_prev !== cout2_expected_prev )
		&& ((cout2_expected_prev !== last_cout2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout2_expected_prev);
		$display ("     Real value = %b", cout2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cout2_exp = cout2_expected_prev;
	end
	if (
		( cout3_expected_prev !== 1'bx ) && ( cout3_prev !== cout3_expected_prev )
		&& ((cout3_expected_prev !== last_cout3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout3_expected_prev);
		$display ("     Real value = %b", cout3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cout3_exp = cout3_expected_prev;
	end
	if (
		( Prueba_expected_prev !== 1'bx ) && ( Prueba_prev !== Prueba_expected_prev )
		&& ((Prueba_expected_prev !== last_Prueba_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Prueba :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Prueba_expected_prev);
		$display ("     Real value = %b", Prueba_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Prueba_exp = Prueba_expected_prev;
	end
	if (
		( SDA_expected_prev !== 1'bx ) && ( SDA_prev !== SDA_expected_prev )
		&& ((SDA_expected_prev !== last_SDA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SDA_expected_prev);
		$display ("     Real value = %b", SDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SDA_exp = SDA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module i2cEsquematico_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg treg_SDA;
// wires                                               
wire cout1;
wire cout2;
wire cout3;
wire Prueba;
wire SDA;

wire sampler;                             

// assign statements (if any)                          
assign SDA = treg_SDA;
i2cEsquematico i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.cout1(cout1),
	.cout2(cout2),
	.cout3(cout3),
	.Prueba(Prueba),
	.SDA(SDA)
);

// SDA
initial
begin
	treg_SDA = 1'b1;
	treg_SDA = #40000 1'b0;
	treg_SDA = #10000 1'b1;
	treg_SDA = #50000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #50000 1'b0;
	treg_SDA = #50000 1'bX;
	treg_SDA = #90000 1'b0;
	treg_SDA = #10000 1'b1;
	treg_SDA = #80000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #20000 1'b0;
	treg_SDA = #20000 1'b1;
	treg_SDA = #20000 1'b0;
	treg_SDA = #30000 1'b1;
	treg_SDA = #480000 1'b0;
end 

// clock
initial
begin
	repeat(12)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
	clock = 1'b0;
	clock = #70000 1'b1;
	# 10000;
	repeat(34)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
end 

i2cEsquematico_vlg_sample_tst tb_sample (
	.clock(clock),
	.SDA(SDA),
	.sampler_tx(sampler)
);

i2cEsquematico_vlg_check_tst tb_out(
	.cout1(cout1),
	.cout2(cout2),
	.cout3(cout3),
	.Prueba(Prueba),
	.SDA(SDA),
	.sampler_rx(sampler)
);
endmodule

